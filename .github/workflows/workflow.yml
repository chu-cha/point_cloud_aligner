name: Build and Release

on:
  push:
    tags: ['v*']
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_DIR: ${{ github.workspace }}/build

    steps:
    - uses: actions/checkout@v4

    - name: Nuclear Qt5 cleanup
      run: |
        
        sudo apt purge -y libvtk7* libvtk6* qt5* libqt5*
        sudo rm -rf /usr/lib/x86_64-linux-gnu/cmake/Qt5*
        sudo rm -rf /usr/share/qt5*
        sudo apt-get autoremove -y

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            libqt6core6 \
            libqt6gui6 \
            libqt6widgets6 \
            libqt6opengl6-dev 

            
        # Пытаемся установить VTK+Qt6 из репозитория (если доступно)
        sudo apt install -y libvtk9-dev libvtk9-qt6-dev || echo "Пакет libvtk9-qt6-dev недоступен, переходим к сборке из исходников"
    
        #Если пакетов нет, собираем VTK вручную
        if ! dpkg -l | grep -q libvtk9-qt6-dev; then
            git clone https://gitlab.kitware.com/vtk/vtk.git
            cd vtk
            git checkout v9.4.2 
            cmake -B build -DVTK_GROUP_QT=ON -DVTK_QT_VERSION=6 -DQT_DIR=/usr/lib/x86_64-linux-gnu/cmake/Qt6
            cmake --build build --parallel $(nproc)
            sudo cmake --install build
        fi
        
        sudo apt-get install -y \          
            libpcl-dev \
            libglew-dev

    - name: Configure with forced Qt6
      run: |
        mkdir -p $BUILD_DIR
        cmake -B $BUILD_DIR -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DQT_MAJOR_VERSION=6 \
          -DQt5_DIR="" \
          -DCMAKE_DISABLE_FIND_PACKAGE_Qt5=ON

    - name: Build
      run: cmake --build $BUILD_DIR --parallel $(nproc)

    - name: Create DEB package
      run: |
        cd $BUILD_DIR
        cpack -G DEB
        echo "DEB_FILE=$(ls *.deb)" >> $GITHUB_ENV

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: "Aligner ${{ github.ref_name }}"
        draft: false
        prerelease: false

    - name: Upload DEB package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.BUILD_DIR }}/${{ env.DEB_FILE }}
        asset_name: ${{ env.DEB_FILE }}