name: Build and Release Ubuntu

on:
  push:
    branches: [main]

jobs:
  build-and-package:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Необходимо для git rev-parse

    - name: Generate commit hash tag
      id: tag
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        echo "TAG_NAME=commit-$COMMIT_HASH" >> $GITHUB_ENV
        echo "Generated tag: $TAG_NAME"

    # 1. Кэширование VTK
    - name: Setup cache
      id: cache-vtk
      uses: actions/cache@v3
      with:
        path: |
          /usr/local/lib/cmake/vtk-9.3
          /usr/local/include/vtk-9.3
          /usr/local/lib/libvtk*
        key: vtk-9.3-${{ runner.os }}-${{ github.run_id }}
        restore-keys: |
          vtk-9.3-${{ runner.os }}-

    # 2. Установка системных зависимостей
    - name: Install core dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git cmake build-essential \
          qt6-base-dev libqt6opengl6-dev \
          libxt-dev libgl1-mesa-dev \
          ninja-build ccache

    # 3. Очистка старых версий VTK
    - name: Clean old VTK installations
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      run: |
        sudo rm -rf /usr/local/include/vtk-* \
                    /usr/local/lib/cmake/vtk-* \
                    /usr/local/lib/libvtk*

    # 4. Сборка VTK (если нет в кэше)
    - name: Build VTK from source
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      run: |
        git clone https://gitlab.kitware.com/vtk/vtk.git --branch v9.3.0 --depth 1
        mkdir vtk/build && cd vtk/build
        
        cmake -GNinja \
          -DVTK_GROUP_QT=ON \
          -DVTK_QT_VERSION=6 \
          -DVTK_BUILD_TESTING=OFF \
          -DVTK_WRAP_PYTHON=OFF \
          -DVTK_MODULE_ENABLE_VTK_GUISupportQt=YES \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          ..
        
        ninja
        sudo ninja install --verbose
        sudo ldconfig

    # 5. Проверка установки VTK
    - name: Verify VTK installation
      run: |
        echo "=== Checking VTK installation ==="
        echo "Searching for VTK files..."
        sudo find /usr/local -name "VTKConfigVersion.cmake" 2>/dev/null || echo "VTK not found in /usr/local"
        
        echo "Contents of /usr/local/lib/cmake:"
        ls -la /usr/local/lib/cmake || echo "Directory not found"
        
        if [ -f "/usr/local/lib/cmake/vtk-9.3/VTKConfigVersion.cmake" ]; then
          echo "=== VTK Version ==="
          grep "VTK_VERSION" /usr/local/lib/cmake/vtk-9.3/VTKConfigVersion.cmake
          echo "Installed VTK components:"
          ls /usr/local/lib/cmake/vtk-9.3 | grep Qt
          echo "GUISupportQt libraries:"
          ls /usr/local/lib/libvtkGUISupportQt* || echo "GUISupportQt not found!"
        else
          echo "ERROR: VTK installation failed!"
          exit 1
        fi

    # 6. Установка PCL и GLEW (после VTK)
    - name: Install PCL and GLEW
      run: |
        sudo apt-get install -y \
          libpcl-visualization1.14 \
          libglew-dev

    # 7. Проверка версий
    - name: Verify other installations
      run: |
        echo "=== PCL ==="
        dpkg -l | grep libpcl || echo "PCL not installed"
        echo "=== GLEW ==="
        dpkg -l | grep libglew || ls /usr/lib/x86_64-linux-gnu/libGLEW*

    # 8. Сборка проекта
    - name: Build project
      run: |
        mkdir build && cd build
        cmake .. \
          -DVTK_DIR=/usr/local/lib/cmake/vtk-9.3 \
          -DQt6_DIR=/usr/lib/cmake/Qt6 \
          -DPCL_DIR=/usr/share/pcl-1.14 \
          -DGLEW_ROOT=/usr \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build . --parallel $(nproc)
        cpack -G DEB

    # 9. Публикация результатов
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: aligner-package-${{ env.TAG_NAME }}
        path: build/aligner*.deb

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "Release ${{ env.TAG_NAME }}"
        files: build/aligner*.deb
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}